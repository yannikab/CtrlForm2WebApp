// This code was generated by an EVALUATION copy of Schematrix SchemaCoder.
// Redistribution of this source code, or an application developed from it, is forbidden.
// Modification of this source code to remove this comment is also forbidden.
// Please visit http://www.schematrix.com/ to obtain a license to use this software.

using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Diagnostics.CodeAnalysis;

using Schematrix.Data;

namespace Form2WebApp.Data
{
    [SuppressMessage("Style", "IDE1006:Naming Styles", Justification = "<Pending>")]

    public partial class tblRegisterAdult
    {
        private static ItblRegisterAdultPersister _DefaultPersister;
        private ItblRegisterAdultPersister _Persister;
        private long _id;
        private DateTime _dateOfBirth;
        private long _employmentStatusId;
        private long? _employmentDurationId;
        private long _educationalLevelId;
        private long _populationId;
        private long _cityId;
        private string _municipality;
        private long _userId;

        static tblRegisterAdult()
        {
            // Assign default persister
            _DefaultPersister = new SqlServertblRegisterAdultPersister();
        }

        public tblRegisterAdult()
        {
            // Assign default persister to instance persister
            _Persister = _DefaultPersister;
        }

        public tblRegisterAdult(long _id)
        {
            // Assign default persister to instance persister
            _Persister = _DefaultPersister;

            // Assign method parameter to private fields
            this._id = _id;

            // Call associated retrieve method
            Retrieve();
        }

        public tblRegisterAdult(DataRow row)
        {
            // Assign default persister to instance persister
            _Persister = _DefaultPersister;

            // Assign column values to private members
            for (int i = 0; i < row.Table.Columns.Count; i++)
            {
                switch (row.Table.Columns[i].ColumnName.ToUpper())
                {
                    case "ID":
                        this.id = Convert.ToInt64(row[i, DataRowVersion.Current]);
                        break;

                    case "DATEOFBIRTH":
                        this.dateOfBirth = Convert.ToDateTime(row[i, DataRowVersion.Current]);
                        break;

                    case "EMPLOYMENTSTATUSID":
                        this.employmentStatusId = Convert.ToInt64(row[i, DataRowVersion.Current]);
                        break;

                    case "EMPLOYMENTDURATIONID":
                        if (row.IsNull(i) == false)
                        {
                            this.employmentDurationId = Convert.ToInt64(row[i, DataRowVersion.Current]);
                        }
                        break;

                    case "EDUCATIONALLEVELID":
                        this.educationalLevelId = Convert.ToInt64(row[i, DataRowVersion.Current]);
                        break;

                    case "POPULATIONID":
                        this.populationId = Convert.ToInt64(row[i, DataRowVersion.Current]);
                        break;

                    case "CITYID":
                        this.cityId = Convert.ToInt64(row[i, DataRowVersion.Current]);
                        break;

                    case "MUNICIPALITY":
                        this.municipality = (string)row[i, DataRowVersion.Current];
                        break;

                    case "USERID":
                        this.userId = Convert.ToInt64(row[i, DataRowVersion.Current]);
                        break;

                }
            }
        }

        public static ItblRegisterAdultPersister DefaultPersister
        {
            get { return _DefaultPersister; }
            set { _DefaultPersister = value; }
        }

        public ItblRegisterAdultPersister Persister
        {
            get { return _Persister; }
            set { _Persister = value; }
        }

        public long id
        {
            get { return _id; }
            set { _id = value; }
        }

        public DateTime dateOfBirth
        {
            get { return _dateOfBirth; }
            set { _dateOfBirth = value; }
        }

        public long employmentStatusId
        {
            get { return _employmentStatusId; }
            set { _employmentStatusId = value; }
        }

        public long? employmentDurationId
        {
            get { return _employmentDurationId; }
            set { _employmentDurationId = value; }
        }

        public long educationalLevelId
        {
            get { return _educationalLevelId; }
            set { _educationalLevelId = value; }
        }

        public long populationId
        {
            get { return _populationId; }
            set { _populationId = value; }
        }

        public long cityId
        {
            get { return _cityId; }
            set { _cityId = value; }
        }

        public string municipality
        {
            get { return _municipality; }
            set { _municipality = value; }
        }

        public long userId
        {
            get { return _userId; }
            set { _userId = value; }
        }

        public virtual void Clone(tblRegisterAdult sourceObject)
        {
            if (sourceObject == null)
            {
                throw new ArgumentNullException("sourceObject");
            }

            // Clone attributes from source object
            this._id = sourceObject.id;
            this._dateOfBirth = sourceObject.dateOfBirth;
            this._employmentStatusId = sourceObject.employmentStatusId;
            this._employmentDurationId = sourceObject.employmentDurationId;
            this._educationalLevelId = sourceObject.educationalLevelId;
            this._populationId = sourceObject.populationId;
            this._cityId = sourceObject.cityId;
            this._municipality = sourceObject.municipality;
            this._userId = sourceObject.userId;
        }

        public virtual int Retrieve()
        {
            return _Persister.Retrieve(this);
        }

        public virtual int Update()
        {
            return _Persister.Update(this);
        }

        public virtual int Delete()
        {
            return _Persister.Delete(this);
        }

        public virtual int Insert()
        {
            return _Persister.Insert(this);
        }

        public static IReader<tblRegisterAdult> ListAll()
        {
            return _DefaultPersister.ListAll();
        }

        public static IReader<tblRegisterAdult> ListForcityId(long cityId)
        {
            return _DefaultPersister.ListForcityId(cityId);
        }

        public static IReader<tblRegisterAdult> ListForeducationalLevelId(long educationalLevelId)
        {
            return _DefaultPersister.ListForeducationalLevelId(educationalLevelId);
        }

        public static IReader<tblRegisterAdult> ListForemploymentDurationId(long? employmentDurationId)
        {
            return _DefaultPersister.ListForemploymentDurationId(employmentDurationId);
        }

        public static IReader<tblRegisterAdult> ListForemploymentStatusId(long employmentStatusId)
        {
            return _DefaultPersister.ListForemploymentStatusId(employmentStatusId);
        }

        public static IReader<tblRegisterAdult> ListForpopulationId(long populationId)
        {
            return _DefaultPersister.ListForpopulationId(populationId);
        }

        public static IReader<tblRegisterAdult> ListForuserId(long userId)
        {
            return _DefaultPersister.ListForuserId(userId);
        }

    }

    [SuppressMessage("Style", "IDE1006:Naming Styles", Justification = "<Pending>")]

    public partial interface ItblRegisterAdultPersister
    {
        int Retrieve(tblRegisterAdult tblRegisterAdult);
        int Update(tblRegisterAdult tblRegisterAdult);
        int Delete(tblRegisterAdult tblRegisterAdult);
        int Insert(tblRegisterAdult tblRegisterAdult);
        IReader<tblRegisterAdult> ListAll();
        IReader<tblRegisterAdult> ListForcityId(long cityId);
        IReader<tblRegisterAdult> ListForeducationalLevelId(long educationalLevelId);
        IReader<tblRegisterAdult> ListForemploymentDurationId(long? employmentDurationId);
        IReader<tblRegisterAdult> ListForemploymentStatusId(long employmentStatusId);
        IReader<tblRegisterAdult> ListForpopulationId(long populationId);
        IReader<tblRegisterAdult> ListForuserId(long userId);
    }

    [SuppressMessage("Style", "IDE0017:Simplify object initialization", Justification = "<Pending>")]

    public partial class SqlServertblRegisterAdultPersister : SqlPersisterBase, ItblRegisterAdultPersister
    {
        public SqlServertblRegisterAdultPersister()
        {
        }

        public SqlServertblRegisterAdultPersister(string connectionString) : base(connectionString)
        {
        }

        public SqlServertblRegisterAdultPersister(SqlConnection connection) : base(connection)
        {
        }

        public SqlServertblRegisterAdultPersister(SqlTransaction transaction) : base(transaction)
        {
        }

        public int Retrieve(tblRegisterAdult tblRegisterAdult)
        {
            int __rowsAffected = 1;

            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("tblRegisterAdultGet"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure;

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Add command parameters
                    SqlParameter vid = new SqlParameter("@id", SqlDbType.BigInt);
                    vid.Direction = ParameterDirection.InputOutput;
                    sqlCommand.Parameters.Add(vid);
                    SqlParameter vdateOfBirth = new SqlParameter("@dateOfBirth", SqlDbType.DateTime);
                    vdateOfBirth.Direction = ParameterDirection.Output;
                    sqlCommand.Parameters.Add(vdateOfBirth);
                    SqlParameter vemploymentStatusId = new SqlParameter("@employmentStatusId", SqlDbType.BigInt);
                    vemploymentStatusId.Direction = ParameterDirection.Output;
                    sqlCommand.Parameters.Add(vemploymentStatusId);
                    SqlParameter vemploymentDurationId = new SqlParameter("@employmentDurationId", SqlDbType.BigInt);
                    vemploymentDurationId.Direction = ParameterDirection.Output;
                    sqlCommand.Parameters.Add(vemploymentDurationId);
                    SqlParameter veducationalLevelId = new SqlParameter("@educationalLevelId", SqlDbType.BigInt);
                    veducationalLevelId.Direction = ParameterDirection.Output;
                    sqlCommand.Parameters.Add(veducationalLevelId);
                    SqlParameter vpopulationId = new SqlParameter("@populationId", SqlDbType.BigInt);
                    vpopulationId.Direction = ParameterDirection.Output;
                    sqlCommand.Parameters.Add(vpopulationId);
                    SqlParameter vcityId = new SqlParameter("@cityId", SqlDbType.BigInt);
                    vcityId.Direction = ParameterDirection.Output;
                    sqlCommand.Parameters.Add(vcityId);
                    SqlParameter vmunicipality = new SqlParameter("@municipality", SqlDbType.NVarChar, 255);
                    vmunicipality.Direction = ParameterDirection.Output;
                    sqlCommand.Parameters.Add(vmunicipality);
                    SqlParameter vuserId = new SqlParameter("@userId", SqlDbType.BigInt);
                    vuserId.Direction = ParameterDirection.Output;
                    sqlCommand.Parameters.Add(vuserId);

                    // Set input parameter values
                    SqlServerHelper.SetParameterValue(vid, tblRegisterAdult.id);

                    // Execute command
                    sqlCommand.ExecuteNonQuery();

                    try
                    {
                        // Get output parameter values
                        tblRegisterAdult.id = SqlServerHelper.ToInt64(vid);
                        tblRegisterAdult.dateOfBirth = SqlServerHelper.ToDateTime(vdateOfBirth);
                        tblRegisterAdult.employmentStatusId = SqlServerHelper.ToInt64(vemploymentStatusId);
                        tblRegisterAdult.employmentDurationId = SqlServerHelper.ToNullableInt64(vemploymentDurationId);
                        tblRegisterAdult.educationalLevelId = SqlServerHelper.ToInt64(veducationalLevelId);
                        tblRegisterAdult.populationId = SqlServerHelper.ToInt64(vpopulationId);
                        tblRegisterAdult.cityId = SqlServerHelper.ToInt64(vcityId);
                        tblRegisterAdult.municipality = SqlServerHelper.ToString(vmunicipality);
                        tblRegisterAdult.userId = SqlServerHelper.ToInt64(vuserId);

                    }
                    catch (Exception ex)
                    {
                        if (ex is System.NullReferenceException)
                        {
                            __rowsAffected = 0;
                        }
                        else
                        {
                            throw ex;
                        }
                    }
                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }

            return __rowsAffected;
        }

        public int Update(tblRegisterAdult tblRegisterAdult)
        {
            int __rowsAffected = 0;

            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("tblRegisterAdultUpdate"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure;

                // Add command parameters
                SqlParameter vid = new SqlParameter("@id", SqlDbType.BigInt);
                vid.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vid);
                SqlParameter vdateOfBirth = new SqlParameter("@dateOfBirth", SqlDbType.DateTime);
                vdateOfBirth.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vdateOfBirth);
                SqlParameter vemploymentStatusId = new SqlParameter("@employmentStatusId", SqlDbType.BigInt);
                vemploymentStatusId.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vemploymentStatusId);
                SqlParameter vemploymentDurationId = new SqlParameter("@employmentDurationId", SqlDbType.BigInt);
                vemploymentDurationId.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vemploymentDurationId);
                SqlParameter veducationalLevelId = new SqlParameter("@educationalLevelId", SqlDbType.BigInt);
                veducationalLevelId.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(veducationalLevelId);
                SqlParameter vpopulationId = new SqlParameter("@populationId", SqlDbType.BigInt);
                vpopulationId.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vpopulationId);
                SqlParameter vcityId = new SqlParameter("@cityId", SqlDbType.BigInt);
                vcityId.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vcityId);
                SqlParameter vmunicipality = new SqlParameter("@municipality", SqlDbType.NVarChar, 255);
                vmunicipality.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vmunicipality);
                SqlParameter vuserId = new SqlParameter("@userId", SqlDbType.BigInt);
                vuserId.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vuserId);

                // Set input parameter values
                SqlServerHelper.SetParameterValue(vid, tblRegisterAdult.id);
                SqlServerHelper.SetParameterValue(vdateOfBirth, tblRegisterAdult.dateOfBirth);
                SqlServerHelper.SetParameterValue(vemploymentStatusId, tblRegisterAdult.employmentStatusId);
                SqlServerHelper.SetParameterValue(vemploymentDurationId, tblRegisterAdult.employmentDurationId);
                SqlServerHelper.SetParameterValue(veducationalLevelId, tblRegisterAdult.educationalLevelId);
                SqlServerHelper.SetParameterValue(vpopulationId, tblRegisterAdult.populationId);
                SqlServerHelper.SetParameterValue(vcityId, tblRegisterAdult.cityId);
                SqlServerHelper.SetParameterValue(vmunicipality, tblRegisterAdult.municipality);
                SqlServerHelper.SetParameterValue(vuserId, tblRegisterAdult.userId);

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Execute command
                    __rowsAffected = sqlCommand.ExecuteNonQuery();
                    if (__rowsAffected == 0)
                    {
                        return __rowsAffected;
                    }


                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }

            return __rowsAffected;
        }

        public int Delete(tblRegisterAdult tblRegisterAdult)
        {
            int __rowsAffected = 0;

            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("tblRegisterAdultDelete"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure;

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Add command parameters
                    SqlParameter vid = new SqlParameter("@id", SqlDbType.BigInt);
                    vid.Direction = ParameterDirection.Input;
                    sqlCommand.Parameters.Add(vid);

                    // Set input parameter values
                    SqlServerHelper.SetParameterValue(vid, tblRegisterAdult.id);

                    // Execute command
                    __rowsAffected = sqlCommand.ExecuteNonQuery();

                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }

            return __rowsAffected;
        }

        public int Insert(tblRegisterAdult tblRegisterAdult)
        {
            int __rowsAffected = 0;

            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("tblRegisterAdultInsert"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure;

                // Add command parameters
                SqlParameter vid = new SqlParameter("@id", SqlDbType.BigInt);
                vid.Direction = ParameterDirection.InputOutput;
                sqlCommand.Parameters.Add(vid);
                SqlParameter vdateOfBirth = new SqlParameter("@dateOfBirth", SqlDbType.DateTime);
                vdateOfBirth.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vdateOfBirth);
                SqlParameter vemploymentStatusId = new SqlParameter("@employmentStatusId", SqlDbType.BigInt);
                vemploymentStatusId.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vemploymentStatusId);
                SqlParameter vemploymentDurationId = new SqlParameter("@employmentDurationId", SqlDbType.BigInt);
                vemploymentDurationId.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vemploymentDurationId);
                SqlParameter veducationalLevelId = new SqlParameter("@educationalLevelId", SqlDbType.BigInt);
                veducationalLevelId.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(veducationalLevelId);
                SqlParameter vpopulationId = new SqlParameter("@populationId", SqlDbType.BigInt);
                vpopulationId.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vpopulationId);
                SqlParameter vcityId = new SqlParameter("@cityId", SqlDbType.BigInt);
                vcityId.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vcityId);
                SqlParameter vmunicipality = new SqlParameter("@municipality", SqlDbType.NVarChar, 255);
                vmunicipality.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vmunicipality);
                SqlParameter vuserId = new SqlParameter("@userId", SqlDbType.BigInt);
                vuserId.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vuserId);

                // Set input parameter values
                SqlServerHelper.SetParameterValue(
                    vid,
                    tblRegisterAdult.id,
                    0);
                SqlServerHelper.SetParameterValue(vdateOfBirth, tblRegisterAdult.dateOfBirth);
                SqlServerHelper.SetParameterValue(vemploymentStatusId, tblRegisterAdult.employmentStatusId);
                SqlServerHelper.SetParameterValue(vemploymentDurationId, tblRegisterAdult.employmentDurationId);
                SqlServerHelper.SetParameterValue(veducationalLevelId, tblRegisterAdult.educationalLevelId);
                SqlServerHelper.SetParameterValue(vpopulationId, tblRegisterAdult.populationId);
                SqlServerHelper.SetParameterValue(vcityId, tblRegisterAdult.cityId);
                SqlServerHelper.SetParameterValue(vmunicipality, tblRegisterAdult.municipality);
                SqlServerHelper.SetParameterValue(vuserId, tblRegisterAdult.userId);

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Execute command
                    __rowsAffected = sqlCommand.ExecuteNonQuery();
                    if (__rowsAffected == 0)
                    {
                        return __rowsAffected;
                    }


                    // Get output parameter values
                    tblRegisterAdult.id = SqlServerHelper.ToInt64(vid);

                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }

            return __rowsAffected;
        }

        public IReader<tblRegisterAdult> ListAll()
        {
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("tblRegisterAdultListAll"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure;

                // Execute command
                SqlDataReader reader = sqlCommand.ExecuteReader(AttachReaderCommand(sqlCommand));

                // Return reader
                return new SqlServertblRegisterAdultReader(reader);
            }
        }

        public IReader<tblRegisterAdult> ListForcityId(long cityId)
        {
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("tblRegisterAdultListForcityId"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure;

                // Add command parameters
                SqlParameter vcityId = new SqlParameter("@cityId", SqlDbType.BigInt);
                vcityId.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vcityId);

                // Set input parameter values
                SqlServerHelper.SetParameterValue(vcityId, cityId);

                // Execute command
                SqlDataReader reader = sqlCommand.ExecuteReader(AttachReaderCommand(sqlCommand));

                // Return reader
                return new SqlServertblRegisterAdultReader(reader);
            }
        }

        public IReader<tblRegisterAdult> ListForeducationalLevelId(long educationalLevelId)
        {
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("tblRegisterAdultListForeducationalLevelId"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure;

                // Add command parameters
                SqlParameter veducationalLevelId = new SqlParameter("@educationalLevelId", SqlDbType.BigInt);
                veducationalLevelId.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(veducationalLevelId);

                // Set input parameter values
                SqlServerHelper.SetParameterValue(veducationalLevelId, educationalLevelId);

                // Execute command
                SqlDataReader reader = sqlCommand.ExecuteReader(AttachReaderCommand(sqlCommand));

                // Return reader
                return new SqlServertblRegisterAdultReader(reader);
            }
        }

        public IReader<tblRegisterAdult> ListForemploymentDurationId(long? employmentDurationId)
        {
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("tblRegisterAdultListForemploymentDurationId"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure;

                // Add command parameters
                SqlParameter vemploymentDurationId = new SqlParameter("@employmentDurationId", SqlDbType.BigInt);
                vemploymentDurationId.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vemploymentDurationId);

                // Set input parameter values
                SqlServerHelper.SetParameterValue(vemploymentDurationId, employmentDurationId);

                // Execute command
                SqlDataReader reader = sqlCommand.ExecuteReader(AttachReaderCommand(sqlCommand));

                // Return reader
                return new SqlServertblRegisterAdultReader(reader);
            }
        }

        public IReader<tblRegisterAdult> ListForemploymentStatusId(long employmentStatusId)
        {
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("tblRegisterAdultListForemploymentStatusId"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure;

                // Add command parameters
                SqlParameter vemploymentStatusId = new SqlParameter("@employmentStatusId", SqlDbType.BigInt);
                vemploymentStatusId.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vemploymentStatusId);

                // Set input parameter values
                SqlServerHelper.SetParameterValue(vemploymentStatusId, employmentStatusId);

                // Execute command
                SqlDataReader reader = sqlCommand.ExecuteReader(AttachReaderCommand(sqlCommand));

                // Return reader
                return new SqlServertblRegisterAdultReader(reader);
            }
        }

        public IReader<tblRegisterAdult> ListForpopulationId(long populationId)
        {
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("tblRegisterAdultListForpopulationId"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure;

                // Add command parameters
                SqlParameter vpopulationId = new SqlParameter("@populationId", SqlDbType.BigInt);
                vpopulationId.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vpopulationId);

                // Set input parameter values
                SqlServerHelper.SetParameterValue(vpopulationId, populationId);

                // Execute command
                SqlDataReader reader = sqlCommand.ExecuteReader(AttachReaderCommand(sqlCommand));

                // Return reader
                return new SqlServertblRegisterAdultReader(reader);
            }
        }

        public IReader<tblRegisterAdult> ListForuserId(long userId)
        {
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("tblRegisterAdultListForuserId"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure;

                // Add command parameters
                SqlParameter vuserId = new SqlParameter("@userId", SqlDbType.BigInt);
                vuserId.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vuserId);

                // Set input parameter values
                SqlServerHelper.SetParameterValue(vuserId, userId);

                // Execute command
                SqlDataReader reader = sqlCommand.ExecuteReader(AttachReaderCommand(sqlCommand));

                // Return reader
                return new SqlServertblRegisterAdultReader(reader);
            }
        }

    }

    [SuppressMessage("Style", "IDE0044:Add readonly modifier", Justification = "<Pending>")]

    public partial class SqlServertblRegisterAdultReader : IReader<tblRegisterAdult>
    {
        private SqlDataReader sqlDataReader;

        private tblRegisterAdult _tblRegisterAdult;

        private int _idOrdinal = -1;
        private int _dateOfBirthOrdinal = -1;
        private int _employmentStatusIdOrdinal = -1;
        private int _employmentDurationIdOrdinal = -1;
        private int _educationalLevelIdOrdinal = -1;
        private int _populationIdOrdinal = -1;
        private int _cityIdOrdinal = -1;
        private int _municipalityOrdinal = -1;
        private int _userIdOrdinal = -1;

        public SqlServertblRegisterAdultReader(SqlDataReader sqlDataReader)
        {
            this.sqlDataReader = sqlDataReader;
            for (int i = 0; i < sqlDataReader.FieldCount; i++)
            {
                string columnName = sqlDataReader.GetName(i);
                columnName = columnName.ToUpper();
                switch (columnName)
                {
                    case "ID":
                        _idOrdinal = i;
                        break;

                    case "DATEOFBIRTH":
                        _dateOfBirthOrdinal = i;
                        break;

                    case "EMPLOYMENTSTATUSID":
                        _employmentStatusIdOrdinal = i;
                        break;

                    case "EMPLOYMENTDURATIONID":
                        _employmentDurationIdOrdinal = i;
                        break;

                    case "EDUCATIONALLEVELID":
                        _educationalLevelIdOrdinal = i;
                        break;

                    case "POPULATIONID":
                        _populationIdOrdinal = i;
                        break;

                    case "CITYID":
                        _cityIdOrdinal = i;
                        break;

                    case "MUNICIPALITY":
                        _municipalityOrdinal = i;
                        break;

                    case "USERID":
                        _userIdOrdinal = i;
                        break;

                }
            }
        }

        #region IReader<tblRegisterAdult> Implementation

        public bool Read()
        {
            _tblRegisterAdult = null;
            return this.sqlDataReader.Read();
        }

        public tblRegisterAdult Current
        {
            get
            {
                if (_tblRegisterAdult == null)
                {
                    _tblRegisterAdult = new tblRegisterAdult();
                    if (_idOrdinal != -1)
                    {
                        _tblRegisterAdult.id = SqlServerHelper.ToInt64(sqlDataReader, _idOrdinal);
                    }
                    if (_dateOfBirthOrdinal != -1)
                    {
                        _tblRegisterAdult.dateOfBirth = SqlServerHelper.ToDateTime(sqlDataReader, _dateOfBirthOrdinal);
                    }
                    if (_employmentStatusIdOrdinal != -1)
                    {
                        _tblRegisterAdult.employmentStatusId = SqlServerHelper.ToInt64(sqlDataReader, _employmentStatusIdOrdinal);
                    }
                    _tblRegisterAdult.employmentDurationId = SqlServerHelper.ToNullableInt64(sqlDataReader, _employmentDurationIdOrdinal);
                    if (_educationalLevelIdOrdinal != -1)
                    {
                        _tblRegisterAdult.educationalLevelId = SqlServerHelper.ToInt64(sqlDataReader, _educationalLevelIdOrdinal);
                    }
                    if (_populationIdOrdinal != -1)
                    {
                        _tblRegisterAdult.populationId = SqlServerHelper.ToInt64(sqlDataReader, _populationIdOrdinal);
                    }
                    if (_cityIdOrdinal != -1)
                    {
                        _tblRegisterAdult.cityId = SqlServerHelper.ToInt64(sqlDataReader, _cityIdOrdinal);
                    }
                    _tblRegisterAdult.municipality = SqlServerHelper.ToString(sqlDataReader, _municipalityOrdinal);
                    if (_userIdOrdinal != -1)
                    {
                        _tblRegisterAdult.userId = SqlServerHelper.ToInt64(sqlDataReader, _userIdOrdinal);
                    }
                }


                return _tblRegisterAdult;
            }
        }

        public void Close()
        {
            sqlDataReader.Close();
        }

        public List<tblRegisterAdult> ToList()
        {
            List<tblRegisterAdult> list = new List<tblRegisterAdult>();
            while (this.Read())
            {
                list.Add(this.Current);
            }
            this.Close();
            return list;
        }

        public DataTable ToDataTable()
        {
            DataTable dataTable = new DataTable();
            dataTable.Load(sqlDataReader);
            return dataTable;
        }

        #endregion

        #region IDisposable Implementation

        public void Dispose()
        {
            sqlDataReader.Dispose();
        }
        #endregion

        #region IEnumerable<tblRegisterAdult> Implementation

        public IEnumerator<tblRegisterAdult> GetEnumerator()
        {
            return new tblRegisterAdultEnumerator(this);
        }

        #endregion

        #region IEnumerable Implementation

        IEnumerator IEnumerable.GetEnumerator()
        {
            return new tblRegisterAdultEnumerator(this);
        }

        #endregion

        [SuppressMessage("Style", "IDE1006:Naming Styles", Justification = "<Pending>")]

        private partial class tblRegisterAdultEnumerator : IEnumerator<tblRegisterAdult>
        {
            private IReader<tblRegisterAdult> tblRegisterAdultReader;

            public tblRegisterAdultEnumerator(IReader<tblRegisterAdult> tblRegisterAdultReader)
            {
                this.tblRegisterAdultReader = tblRegisterAdultReader;
            }

            #region IEnumerator<tblRegisterAdult> Members

            public tblRegisterAdult Current
            {
                get { return this.tblRegisterAdultReader.Current; }
            }

            #endregion

            #region IDisposable Members

            public void Dispose()
            {
                this.tblRegisterAdultReader.Dispose();
            }

            #endregion

            #region IEnumerator Members

            object IEnumerator.Current
            {
                get { return this.tblRegisterAdultReader.Current; }
            }

            public bool MoveNext()
            {
                return this.tblRegisterAdultReader.Read();
            }

            public void Reset()
            {
                throw new Exception("Reset of tblregisteradult reader is not supported.");
            }

            #endregion

        }
    }
}
