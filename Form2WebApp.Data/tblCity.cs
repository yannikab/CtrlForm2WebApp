// This code was generated by an EVALUATION copy of Schematrix SchemaCoder.
// Redistribution of this source code, or an application developed from it, is forbidden.
// Modification of this source code to remove this comment is also forbidden.
// Please visit http://www.schematrix.com/ to obtain a license to use this software.

using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Data.SqlTypes;

using Schematrix.Data;

namespace Form2WebApp.Data
{
    public partial class tblCity
    {
        private static ItblCityPersister _DefaultPersister;
        private ItblCityPersister _Persister;
        private long _id;
        private string _name;

        static tblCity()
        {
            // Assign default persister
            _DefaultPersister = new SqlServertblCityPersister();
        }

        public tblCity()
        {
            // Assign default persister to instance persister
            _Persister = _DefaultPersister;
        }

        public tblCity(long _id)
        {
            // Assign default persister to instance persister
            _Persister = _DefaultPersister;

            // Assign method parameter to private fields
            this._id = _id;

            // Call associated retrieve method
            Retrieve();
        }

        public tblCity(DataRow row)
        {
            // Assign default persister to instance persister
            _Persister = _DefaultPersister;

            // Assign column values to private members
            for (int i = 0; i < row.Table.Columns.Count; i++)
            {
                switch (row.Table.Columns[i].ColumnName.ToUpper())
                {
                    case "ID":
                        this.id = Convert.ToInt64(row[i, DataRowVersion.Current]);
                        break;

                    case "NAME":
                        this.name = (string)row[i, DataRowVersion.Current];
                        break;

                }
            }
        }

        public static ItblCityPersister DefaultPersister
        {
            get { return _DefaultPersister; }
            set { _DefaultPersister = value; }
        }

        public ItblCityPersister Persister
        {
            get { return _Persister; }
            set { _Persister = value; }
        }

        public long id
        {
            get { return _id; }
            set { _id = value; }
        }

        public string name
        {
            get { return _name; }
            set { _name = value; }
        }

        public virtual void Clone(tblCity sourceObject)
        {
            if (sourceObject == null)
            {
                throw new ArgumentNullException("sourceObject");
            }

            // Clone attributes from source object
            this._id = sourceObject.id;
            this._name = sourceObject.name;
        }

        public virtual int Retrieve()
        {
            return _Persister.Retrieve(this);
        }

        public virtual int Update()
        {
            return _Persister.Update(this);
        }

        public virtual int Delete()
        {
            return _Persister.Delete(this);
        }

        public virtual int Insert()
        {
            return _Persister.Insert(this);
        }

        public static IReader<tblCity> ListAll()
        {
            return _DefaultPersister.ListAll();
        }

    }

    public partial interface ItblCityPersister
    {
        int Retrieve(tblCity tblCity);
        int Update(tblCity tblCity);
        int Delete(tblCity tblCity);
        int Insert(tblCity tblCity);
        IReader<tblCity> ListAll();
    }

    public partial class SqlServertblCityPersister : SqlPersisterBase, ItblCityPersister
    {
        public SqlServertblCityPersister()
        {
        }

        public SqlServertblCityPersister(string connectionString) : base(connectionString)
        {
        }

        public SqlServertblCityPersister(SqlConnection connection) : base(connection)
        {
        }

        public SqlServertblCityPersister(SqlTransaction transaction) : base(transaction)
        {
        }

        public int Retrieve(tblCity tblCity)
        {
            int __rowsAffected = 1;

            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("tblCityGet"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure;

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Add command parameters
                    SqlParameter vid = new SqlParameter("@id", SqlDbType.BigInt);
                    vid.Direction = ParameterDirection.InputOutput;
                    sqlCommand.Parameters.Add(vid);
                    SqlParameter vname = new SqlParameter("@name", SqlDbType.NVarChar, 100);
                    vname.Direction = ParameterDirection.Output;
                    sqlCommand.Parameters.Add(vname);

                    // Set input parameter values
                    SqlServerHelper.SetParameterValue(vid, tblCity.id);

                    // Execute command
                    sqlCommand.ExecuteNonQuery();

                    try
                    {
                        // Get output parameter values
                        tblCity.id = SqlServerHelper.ToInt64(vid);
                        tblCity.name = SqlServerHelper.ToString(vname);

                    }
                    catch (Exception ex)
                    {
                        if (ex is System.NullReferenceException)
                        {
                            __rowsAffected = 0;
                        }
                        else
                        {
                            throw ex;
                        }
                    }
                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }

            return __rowsAffected;
        }

        public int Update(tblCity tblCity)
        {
            int __rowsAffected = 0;

            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("tblCityUpdate"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure;

                // Add command parameters
                SqlParameter vid = new SqlParameter("@id", SqlDbType.BigInt);
                vid.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vid);
                SqlParameter vname = new SqlParameter("@name", SqlDbType.NVarChar, 100);
                vname.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vname);

                // Set input parameter values
                SqlServerHelper.SetParameterValue(vid, tblCity.id);
                SqlServerHelper.SetParameterValue(vname, tblCity.name);

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Execute command
                    __rowsAffected = sqlCommand.ExecuteNonQuery();
                    if (__rowsAffected == 0)
                    {
                        return __rowsAffected;
                    }


                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }

            return __rowsAffected;
        }

        public int Delete(tblCity tblCity)
        {
            int __rowsAffected = 0;

            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("tblCityDelete"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure;

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Add command parameters
                    SqlParameter vid = new SqlParameter("@id", SqlDbType.BigInt);
                    vid.Direction = ParameterDirection.Input;
                    sqlCommand.Parameters.Add(vid);

                    // Set input parameter values
                    SqlServerHelper.SetParameterValue(vid, tblCity.id);

                    // Execute command
                    __rowsAffected = sqlCommand.ExecuteNonQuery();

                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }

            return __rowsAffected;
        }

        public int Insert(tblCity tblCity)
        {
            int __rowsAffected = 0;

            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("tblCityInsert"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure;

                // Add command parameters
                SqlParameter vid = new SqlParameter("@id", SqlDbType.BigInt);
                vid.Direction = ParameterDirection.InputOutput;
                sqlCommand.Parameters.Add(vid);
                SqlParameter vname = new SqlParameter("@name", SqlDbType.NVarChar, 100);
                vname.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vname);

                // Set input parameter values
                SqlServerHelper.SetParameterValue(
                    vid,
                    tblCity.id,
                    0);
                SqlServerHelper.SetParameterValue(vname, tblCity.name);

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Execute command
                    __rowsAffected = sqlCommand.ExecuteNonQuery();
                    if (__rowsAffected == 0)
                    {
                        return __rowsAffected;
                    }


                    // Get output parameter values
                    tblCity.id = SqlServerHelper.ToInt64(vid);

                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }

            return __rowsAffected;
        }

        public IReader<tblCity> ListAll()
        {
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("tblCityListAll"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure;

                // Execute command
                SqlDataReader reader = sqlCommand.ExecuteReader(AttachReaderCommand(sqlCommand));

                // Return reader
                return new SqlServertblCityReader(reader);
            }
        }

    }

    public partial class SqlServertblCityReader : IReader<tblCity>
    {
        private SqlDataReader sqlDataReader;

        private tblCity _tblCity;

        private int _idOrdinal = -1;
        private int _nameOrdinal = -1;

        public SqlServertblCityReader(SqlDataReader sqlDataReader)
        {
            this.sqlDataReader = sqlDataReader;
            for (int i = 0; i < sqlDataReader.FieldCount; i++)
            {
                string columnName = sqlDataReader.GetName(i);
                columnName = columnName.ToUpper();
                switch (columnName)
                {
                    case "ID":
                        _idOrdinal = i;
                        break;

                    case "NAME":
                        _nameOrdinal = i;
                        break;

                }
            }
        }

        #region IReader<tblCity> Implementation

        public bool Read()
        {
            _tblCity = null;
            return this.sqlDataReader.Read();
        }

        public tblCity Current
        {
            get
            {
                if (_tblCity == null)
                {
                    _tblCity = new tblCity();
                    if (_idOrdinal != -1)
                    {
                        _tblCity.id = SqlServerHelper.ToInt64(sqlDataReader, _idOrdinal);
                    }
                    _tblCity.name = SqlServerHelper.ToString(sqlDataReader, _nameOrdinal);
                }


                return _tblCity;
            }
        }

        public void Close()
        {
            sqlDataReader.Close();
        }

        public List<tblCity> ToList()
        {
            List<tblCity> list = new List<tblCity>();
            while (this.Read())
            {
                list.Add(this.Current);
            }
            this.Close();
            return list;
        }

        public DataTable ToDataTable()
        {
            DataTable dataTable = new DataTable();
            dataTable.Load(sqlDataReader);
            return dataTable;
        }

        #endregion

        #region IDisposable Implementation

        public void Dispose()
        {
            sqlDataReader.Dispose();
        }
        #endregion

        #region IEnumerable<tblCity> Implementation

        public IEnumerator<tblCity> GetEnumerator()
        {
            return new tblCityEnumerator(this);
        }

        #endregion

        #region IEnumerable Implementation

        IEnumerator IEnumerable.GetEnumerator()
        {
            return new tblCityEnumerator(this);
        }

        #endregion

        private partial class tblCityEnumerator : IEnumerator<tblCity>
        {
            private IReader<tblCity> tblCityReader;

            public tblCityEnumerator(IReader<tblCity> tblCityReader)
            {
                this.tblCityReader = tblCityReader;
            }

            #region IEnumerator<tblCity> Members

            public tblCity Current
            {
                get { return this.tblCityReader.Current; }
            }

            #endregion

            #region IDisposable Members

            public void Dispose()
            {
                this.tblCityReader.Dispose();
            }

            #endregion

            #region IEnumerator Members

            object IEnumerator.Current
            {
                get { return this.tblCityReader.Current; }
            }

            public bool MoveNext()
            {
                return this.tblCityReader.Read();
            }

            public void Reset()
            {
                throw new Exception("Reset of tblcity reader is not supported.");
            }

            #endregion

        }
    }
}
