// This code was generated by an EVALUATION copy of Schematrix SchemaCoder.
// Redistribution of this source code, or an application developed from it, is forbidden.
// Modification of this source code to remove this comment is also forbidden.
// Please visit http://www.schematrix.com/ to obtain a license to use this software.

using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Diagnostics.CodeAnalysis;

using Schematrix.Data;

namespace Form2WebApp.Data
{
    [SuppressMessage("Style", "IDE1006:Naming Styles", Justification = "<Pending>")]

    public partial class tblRegisterStudent
    {
        private static ItblRegisterStudentPersister _DefaultPersister;
        private ItblRegisterStudentPersister _Persister;
        private long _id;
        private DateTime _dateOfBirth;
        private long _populationId;
        private long _cityId;
        private string _municipality;
        private string _email;
        private long _educationalGradeId;
        private long? _orientationGroupId;
        private string _coachingSchool;
        private bool? _privateLessons;
        private long _userId;

        static tblRegisterStudent()
        {
            // Assign default persister
            _DefaultPersister = new SqlServertblRegisterStudentPersister();
        }

        public tblRegisterStudent()
        {
            // Assign default persister to instance persister
            _Persister = _DefaultPersister;
        }

        public tblRegisterStudent(long _id)
        {
            // Assign default persister to instance persister
            _Persister = _DefaultPersister;

            // Assign method parameter to private fields
            this._id = _id;

            // Call associated retrieve method
            Retrieve();
        }

        public tblRegisterStudent(DataRow row)
        {
            // Assign default persister to instance persister
            _Persister = _DefaultPersister;

            // Assign column values to private members
            for (int i = 0; i < row.Table.Columns.Count; i++)
            {
                switch (row.Table.Columns[i].ColumnName.ToUpper())
                {
                    case "ID":
                        this.id = Convert.ToInt64(row[i, DataRowVersion.Current]);
                        break;

                    case "DATEOFBIRTH":
                        this.dateOfBirth = Convert.ToDateTime(row[i, DataRowVersion.Current]);
                        break;

                    case "POPULATIONID":
                        this.populationId = Convert.ToInt64(row[i, DataRowVersion.Current]);
                        break;

                    case "CITYID":
                        this.cityId = Convert.ToInt64(row[i, DataRowVersion.Current]);
                        break;

                    case "MUNICIPALITY":
                        this.municipality = (string)row[i, DataRowVersion.Current];
                        break;

                    case "EMAIL":
                        this.email = (string)row[i, DataRowVersion.Current];
                        break;

                    case "EDUCATIONALGRADEID":
                        this.educationalGradeId = Convert.ToInt64(row[i, DataRowVersion.Current]);
                        break;

                    case "ORIENTATIONGROUPID":
                        if (row.IsNull(i) == false)
                        {
                            this.orientationGroupId = Convert.ToInt64(row[i, DataRowVersion.Current]);
                        }
                        break;

                    case "COACHINGSCHOOL":
                        if (row.IsNull(i) == false)
                        {
                            this.coachingSchool = (string)row[i, DataRowVersion.Current];
                        }
                        break;

                    case "PRIVATELESSONS":
                        if (row.IsNull(i) == false)
                        {
                            this.privateLessons = Convert.ToBoolean(row[i, DataRowVersion.Current]);
                        }
                        break;

                    case "USERID":
                        this.userId = Convert.ToInt64(row[i, DataRowVersion.Current]);
                        break;

                }
            }
        }

        public static ItblRegisterStudentPersister DefaultPersister
        {
            get { return _DefaultPersister; }
            set { _DefaultPersister = value; }
        }

        public ItblRegisterStudentPersister Persister
        {
            get { return _Persister; }
            set { _Persister = value; }
        }

        public long id
        {
            get { return _id; }
            set { _id = value; }
        }

        public DateTime dateOfBirth
        {
            get { return _dateOfBirth; }
            set { _dateOfBirth = value; }
        }

        public long populationId
        {
            get { return _populationId; }
            set { _populationId = value; }
        }

        public long cityId
        {
            get { return _cityId; }
            set { _cityId = value; }
        }

        public string municipality
        {
            get { return _municipality; }
            set { _municipality = value; }
        }

        public string email
        {
            get { return _email; }
            set { _email = value; }
        }

        public long educationalGradeId
        {
            get { return _educationalGradeId; }
            set { _educationalGradeId = value; }
        }

        public long? orientationGroupId
        {
            get { return _orientationGroupId; }
            set { _orientationGroupId = value; }
        }

        public string coachingSchool
        {
            get { return _coachingSchool; }
            set { _coachingSchool = value; }
        }

        public bool? privateLessons
        {
            get { return _privateLessons; }
            set { _privateLessons = value; }
        }

        public long userId
        {
            get { return _userId; }
            set { _userId = value; }
        }

        public virtual void Clone(tblRegisterStudent sourceObject)
        {
            if (sourceObject == null)
            {
                throw new ArgumentNullException("sourceObject");
            }

            // Clone attributes from source object
            this._id = sourceObject.id;
            this._dateOfBirth = sourceObject.dateOfBirth;
            this._populationId = sourceObject.populationId;
            this._cityId = sourceObject.cityId;
            this._municipality = sourceObject.municipality;
            this._email = sourceObject.email;
            this._educationalGradeId = sourceObject.educationalGradeId;
            this._orientationGroupId = sourceObject.orientationGroupId;
            this._coachingSchool = sourceObject.coachingSchool;
            this._privateLessons = sourceObject.privateLessons;
            this._userId = sourceObject.userId;
        }

        public virtual int Retrieve()
        {
            return _Persister.Retrieve(this);
        }

        public virtual int Update()
        {
            return _Persister.Update(this);
        }

        public virtual int Delete()
        {
            return _Persister.Delete(this);
        }

        public virtual int Insert()
        {
            return _Persister.Insert(this);
        }

        public static IReader<tblRegisterStudent> ListAll()
        {
            return _DefaultPersister.ListAll();
        }

        public static IReader<tblRegisterStudent> ListForcityId(long cityId)
        {
            return _DefaultPersister.ListForcityId(cityId);
        }

        public static IReader<tblRegisterStudent> ListForeducationalGradeId(long educationalGradeId)
        {
            return _DefaultPersister.ListForeducationalGradeId(educationalGradeId);
        }

        public static IReader<tblRegisterStudent> ListFororientationGroupId(long? orientationGroupId)
        {
            return _DefaultPersister.ListFororientationGroupId(orientationGroupId);
        }

        public static IReader<tblRegisterStudent> ListForpopulationId(long populationId)
        {
            return _DefaultPersister.ListForpopulationId(populationId);
        }

        public static IReader<tblRegisterStudent> ListForuserId(long userId)
        {
            return _DefaultPersister.ListForuserId(userId);
        }

    }

    public partial interface ItblRegisterStudentPersister
    {
        int Retrieve(tblRegisterStudent tblRegisterStudent);
        int Update(tblRegisterStudent tblRegisterStudent);
        int Delete(tblRegisterStudent tblRegisterStudent);
        int Insert(tblRegisterStudent tblRegisterStudent);
        IReader<tblRegisterStudent> ListAll();
        IReader<tblRegisterStudent> ListForcityId(long cityId);
        IReader<tblRegisterStudent> ListForeducationalGradeId(long educationalGradeId);
        IReader<tblRegisterStudent> ListFororientationGroupId(long? orientationGroupId);
        IReader<tblRegisterStudent> ListForpopulationId(long populationId);
        IReader<tblRegisterStudent> ListForuserId(long userId);
    }

    [SuppressMessage("Style", "IDE0017:Simplify object initialization", Justification = "<Pending>")]

    public partial class SqlServertblRegisterStudentPersister : SqlPersisterBase, ItblRegisterStudentPersister
    {
        public SqlServertblRegisterStudentPersister()
        {
        }

        public SqlServertblRegisterStudentPersister(string connectionString) : base(connectionString)
        {
        }

        public SqlServertblRegisterStudentPersister(SqlConnection connection) : base(connection)
        {
        }

        public SqlServertblRegisterStudentPersister(SqlTransaction transaction) : base(transaction)
        {
        }

        public int Retrieve(tblRegisterStudent tblRegisterStudent)
        {
            int __rowsAffected = 1;

            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("tblRegisterStudentGet"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure;

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Add command parameters
                    SqlParameter vid = new SqlParameter("@id", SqlDbType.BigInt);
                    vid.Direction = ParameterDirection.InputOutput;
                    sqlCommand.Parameters.Add(vid);
                    SqlParameter vdateOfBirth = new SqlParameter("@dateOfBirth", SqlDbType.DateTime);
                    vdateOfBirth.Direction = ParameterDirection.Output;
                    sqlCommand.Parameters.Add(vdateOfBirth);
                    SqlParameter vpopulationId = new SqlParameter("@populationId", SqlDbType.BigInt);
                    vpopulationId.Direction = ParameterDirection.Output;
                    sqlCommand.Parameters.Add(vpopulationId);
                    SqlParameter vcityId = new SqlParameter("@cityId", SqlDbType.BigInt);
                    vcityId.Direction = ParameterDirection.Output;
                    sqlCommand.Parameters.Add(vcityId);
                    SqlParameter vmunicipality = new SqlParameter("@municipality", SqlDbType.NVarChar, 255);
                    vmunicipality.Direction = ParameterDirection.Output;
                    sqlCommand.Parameters.Add(vmunicipality);
                    SqlParameter vemail = new SqlParameter("@email", SqlDbType.NVarChar, 255);
                    vemail.Direction = ParameterDirection.Output;
                    sqlCommand.Parameters.Add(vemail);
                    SqlParameter veducationalGradeId = new SqlParameter("@educationalGradeId", SqlDbType.BigInt);
                    veducationalGradeId.Direction = ParameterDirection.Output;
                    sqlCommand.Parameters.Add(veducationalGradeId);
                    SqlParameter vorientationGroupId = new SqlParameter("@orientationGroupId", SqlDbType.BigInt);
                    vorientationGroupId.Direction = ParameterDirection.Output;
                    sqlCommand.Parameters.Add(vorientationGroupId);
                    SqlParameter vcoachingSchool = new SqlParameter("@coachingSchool", SqlDbType.NVarChar, 255);
                    vcoachingSchool.Direction = ParameterDirection.Output;
                    sqlCommand.Parameters.Add(vcoachingSchool);
                    SqlParameter vprivateLessons = new SqlParameter("@privateLessons", SqlDbType.Bit);
                    vprivateLessons.Direction = ParameterDirection.Output;
                    sqlCommand.Parameters.Add(vprivateLessons);
                    SqlParameter vuserId = new SqlParameter("@userId", SqlDbType.BigInt);
                    vuserId.Direction = ParameterDirection.Output;
                    sqlCommand.Parameters.Add(vuserId);

                    // Set input parameter values
                    SqlServerHelper.SetParameterValue(vid, tblRegisterStudent.id);

                    // Execute command
                    sqlCommand.ExecuteNonQuery();

                    try
                    {
                        // Get output parameter values
                        tblRegisterStudent.id = SqlServerHelper.ToInt64(vid);
                        tblRegisterStudent.dateOfBirth = SqlServerHelper.ToDateTime(vdateOfBirth);
                        tblRegisterStudent.populationId = SqlServerHelper.ToInt64(vpopulationId);
                        tblRegisterStudent.cityId = SqlServerHelper.ToInt64(vcityId);
                        tblRegisterStudent.municipality = SqlServerHelper.ToString(vmunicipality);
                        tblRegisterStudent.email = SqlServerHelper.ToString(vemail);
                        tblRegisterStudent.educationalGradeId = SqlServerHelper.ToInt64(veducationalGradeId);
                        tblRegisterStudent.orientationGroupId = SqlServerHelper.ToNullableInt64(vorientationGroupId);
                        tblRegisterStudent.coachingSchool = SqlServerHelper.ToString(vcoachingSchool);
                        tblRegisterStudent.privateLessons = SqlServerHelper.ToNullableBoolean(vprivateLessons);
                        tblRegisterStudent.userId = SqlServerHelper.ToInt64(vuserId);

                    }
                    catch (Exception ex)
                    {
                        if (ex is System.NullReferenceException)
                        {
                            __rowsAffected = 0;
                        }
                        else
                        {
                            throw ex;
                        }
                    }
                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }

            return __rowsAffected;
        }

        public int Update(tblRegisterStudent tblRegisterStudent)
        {
            int __rowsAffected = 0;

            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("tblRegisterStudentUpdate"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure;

                // Add command parameters
                SqlParameter vid = new SqlParameter("@id", SqlDbType.BigInt);
                vid.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vid);
                SqlParameter vdateOfBirth = new SqlParameter("@dateOfBirth", SqlDbType.DateTime);
                vdateOfBirth.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vdateOfBirth);
                SqlParameter vpopulationId = new SqlParameter("@populationId", SqlDbType.BigInt);
                vpopulationId.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vpopulationId);
                SqlParameter vcityId = new SqlParameter("@cityId", SqlDbType.BigInt);
                vcityId.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vcityId);
                SqlParameter vmunicipality = new SqlParameter("@municipality", SqlDbType.NVarChar, 255);
                vmunicipality.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vmunicipality);
                SqlParameter vemail = new SqlParameter("@email", SqlDbType.NVarChar, 255);
                vemail.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vemail);
                SqlParameter veducationalGradeId = new SqlParameter("@educationalGradeId", SqlDbType.BigInt);
                veducationalGradeId.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(veducationalGradeId);
                SqlParameter vorientationGroupId = new SqlParameter("@orientationGroupId", SqlDbType.BigInt);
                vorientationGroupId.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vorientationGroupId);
                SqlParameter vcoachingSchool = new SqlParameter("@coachingSchool", SqlDbType.NVarChar, 255);
                vcoachingSchool.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vcoachingSchool);
                SqlParameter vprivateLessons = new SqlParameter("@privateLessons", SqlDbType.Bit);
                vprivateLessons.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vprivateLessons);
                SqlParameter vuserId = new SqlParameter("@userId", SqlDbType.BigInt);
                vuserId.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vuserId);

                // Set input parameter values
                SqlServerHelper.SetParameterValue(vid, tblRegisterStudent.id);
                SqlServerHelper.SetParameterValue(vdateOfBirth, tblRegisterStudent.dateOfBirth);
                SqlServerHelper.SetParameterValue(vpopulationId, tblRegisterStudent.populationId);
                SqlServerHelper.SetParameterValue(vcityId, tblRegisterStudent.cityId);
                SqlServerHelper.SetParameterValue(vmunicipality, tblRegisterStudent.municipality);
                SqlServerHelper.SetParameterValue(vemail, tblRegisterStudent.email);
                SqlServerHelper.SetParameterValue(veducationalGradeId, tblRegisterStudent.educationalGradeId);
                SqlServerHelper.SetParameterValue(vorientationGroupId, tblRegisterStudent.orientationGroupId);
                SqlServerHelper.SetParameterValue(vcoachingSchool, tblRegisterStudent.coachingSchool);
                SqlServerHelper.SetParameterValue(vprivateLessons, tblRegisterStudent.privateLessons);
                SqlServerHelper.SetParameterValue(vuserId, tblRegisterStudent.userId);

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Execute command
                    __rowsAffected = sqlCommand.ExecuteNonQuery();
                    if (__rowsAffected == 0)
                    {
                        return __rowsAffected;
                    }


                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }

            return __rowsAffected;
        }

        public int Delete(tblRegisterStudent tblRegisterStudent)
        {
            int __rowsAffected = 0;

            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("tblRegisterStudentDelete"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure;

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Add command parameters
                    SqlParameter vid = new SqlParameter("@id", SqlDbType.BigInt);
                    vid.Direction = ParameterDirection.Input;
                    sqlCommand.Parameters.Add(vid);

                    // Set input parameter values
                    SqlServerHelper.SetParameterValue(vid, tblRegisterStudent.id);

                    // Execute command
                    __rowsAffected = sqlCommand.ExecuteNonQuery();

                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }

            return __rowsAffected;
        }

        public int Insert(tblRegisterStudent tblRegisterStudent)
        {
            int __rowsAffected = 0;

            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("tblRegisterStudentInsert"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure;

                // Add command parameters
                SqlParameter vid = new SqlParameter("@id", SqlDbType.BigInt);
                vid.Direction = ParameterDirection.InputOutput;
                sqlCommand.Parameters.Add(vid);
                SqlParameter vdateOfBirth = new SqlParameter("@dateOfBirth", SqlDbType.DateTime);
                vdateOfBirth.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vdateOfBirth);
                SqlParameter vpopulationId = new SqlParameter("@populationId", SqlDbType.BigInt);
                vpopulationId.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vpopulationId);
                SqlParameter vcityId = new SqlParameter("@cityId", SqlDbType.BigInt);
                vcityId.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vcityId);
                SqlParameter vmunicipality = new SqlParameter("@municipality", SqlDbType.NVarChar, 255);
                vmunicipality.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vmunicipality);
                SqlParameter vemail = new SqlParameter("@email", SqlDbType.NVarChar, 255);
                vemail.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vemail);
                SqlParameter veducationalGradeId = new SqlParameter("@educationalGradeId", SqlDbType.BigInt);
                veducationalGradeId.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(veducationalGradeId);
                SqlParameter vorientationGroupId = new SqlParameter("@orientationGroupId", SqlDbType.BigInt);
                vorientationGroupId.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vorientationGroupId);
                SqlParameter vcoachingSchool = new SqlParameter("@coachingSchool", SqlDbType.NVarChar, 255);
                vcoachingSchool.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vcoachingSchool);
                SqlParameter vprivateLessons = new SqlParameter("@privateLessons", SqlDbType.Bit);
                vprivateLessons.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vprivateLessons);
                SqlParameter vuserId = new SqlParameter("@userId", SqlDbType.BigInt);
                vuserId.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vuserId);

                // Set input parameter values
                SqlServerHelper.SetParameterValue(
                    vid,
                    tblRegisterStudent.id,
                    0);
                SqlServerHelper.SetParameterValue(vdateOfBirth, tblRegisterStudent.dateOfBirth);
                SqlServerHelper.SetParameterValue(vpopulationId, tblRegisterStudent.populationId);
                SqlServerHelper.SetParameterValue(vcityId, tblRegisterStudent.cityId);
                SqlServerHelper.SetParameterValue(vmunicipality, tblRegisterStudent.municipality);
                SqlServerHelper.SetParameterValue(vemail, tblRegisterStudent.email);
                SqlServerHelper.SetParameterValue(veducationalGradeId, tblRegisterStudent.educationalGradeId);
                SqlServerHelper.SetParameterValue(vorientationGroupId, tblRegisterStudent.orientationGroupId);
                SqlServerHelper.SetParameterValue(vcoachingSchool, tblRegisterStudent.coachingSchool);
                SqlServerHelper.SetParameterValue(vprivateLessons, tblRegisterStudent.privateLessons);
                SqlServerHelper.SetParameterValue(vuserId, tblRegisterStudent.userId);

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Execute command
                    __rowsAffected = sqlCommand.ExecuteNonQuery();
                    if (__rowsAffected == 0)
                    {
                        return __rowsAffected;
                    }


                    // Get output parameter values
                    tblRegisterStudent.id = SqlServerHelper.ToInt64(vid);

                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }

            return __rowsAffected;
        }

        public IReader<tblRegisterStudent> ListAll()
        {
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("tblRegisterStudentListAll"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure;

                // Execute command
                SqlDataReader reader = sqlCommand.ExecuteReader(AttachReaderCommand(sqlCommand));

                // Return reader
                return new SqlServertblRegisterStudentReader(reader);
            }
        }

        public IReader<tblRegisterStudent> ListForcityId(long cityId)
        {
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("tblRegisterStudentListForcityId"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure;

                // Add command parameters
                SqlParameter vcityId = new SqlParameter("@cityId", SqlDbType.BigInt);
                vcityId.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vcityId);

                // Set input parameter values
                SqlServerHelper.SetParameterValue(vcityId, cityId);

                // Execute command
                SqlDataReader reader = sqlCommand.ExecuteReader(AttachReaderCommand(sqlCommand));

                // Return reader
                return new SqlServertblRegisterStudentReader(reader);
            }
        }

        public IReader<tblRegisterStudent> ListForeducationalGradeId(long educationalGradeId)
        {
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("tblRegisterStudentListForeducationalGradeId"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure;

                // Add command parameters
                SqlParameter veducationalGradeId = new SqlParameter("@educationalGradeId", SqlDbType.BigInt);
                veducationalGradeId.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(veducationalGradeId);

                // Set input parameter values
                SqlServerHelper.SetParameterValue(veducationalGradeId, educationalGradeId);

                // Execute command
                SqlDataReader reader = sqlCommand.ExecuteReader(AttachReaderCommand(sqlCommand));

                // Return reader
                return new SqlServertblRegisterStudentReader(reader);
            }
        }

        public IReader<tblRegisterStudent> ListFororientationGroupId(long? orientationGroupId)
        {
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("tblRegisterStudentListFororientationGroupId"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure;

                // Add command parameters
                SqlParameter vorientationGroupId = new SqlParameter("@orientationGroupId", SqlDbType.BigInt);
                vorientationGroupId.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vorientationGroupId);

                // Set input parameter values
                SqlServerHelper.SetParameterValue(vorientationGroupId, orientationGroupId);

                // Execute command
                SqlDataReader reader = sqlCommand.ExecuteReader(AttachReaderCommand(sqlCommand));

                // Return reader
                return new SqlServertblRegisterStudentReader(reader);
            }
        }

        public IReader<tblRegisterStudent> ListForpopulationId(long populationId)
        {
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("tblRegisterStudentListForpopulationId"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure;

                // Add command parameters
                SqlParameter vpopulationId = new SqlParameter("@populationId", SqlDbType.BigInt);
                vpopulationId.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vpopulationId);

                // Set input parameter values
                SqlServerHelper.SetParameterValue(vpopulationId, populationId);

                // Execute command
                SqlDataReader reader = sqlCommand.ExecuteReader(AttachReaderCommand(sqlCommand));

                // Return reader
                return new SqlServertblRegisterStudentReader(reader);
            }
        }

        public IReader<tblRegisterStudent> ListForuserId(long userId)
        {
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("tblRegisterStudentListForuserId"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure;

                // Add command parameters
                SqlParameter vuserId = new SqlParameter("@userId", SqlDbType.BigInt);
                vuserId.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vuserId);

                // Set input parameter values
                SqlServerHelper.SetParameterValue(vuserId, userId);

                // Execute command
                SqlDataReader reader = sqlCommand.ExecuteReader(AttachReaderCommand(sqlCommand));

                // Return reader
                return new SqlServertblRegisterStudentReader(reader);
            }
        }

    }

    [SuppressMessage("Style", "IDE0044:Add readonly modifier", Justification = "<Pending>")]

    public partial class SqlServertblRegisterStudentReader : IReader<tblRegisterStudent>
    {
        private SqlDataReader sqlDataReader;

        private tblRegisterStudent _tblRegisterStudent;

        private int _idOrdinal = -1;
        private int _dateOfBirthOrdinal = -1;
        private int _populationIdOrdinal = -1;
        private int _cityIdOrdinal = -1;
        private int _municipalityOrdinal = -1;
        private int _emailOrdinal = -1;
        private int _educationalGradeIdOrdinal = -1;
        private int _orientationGroupIdOrdinal = -1;
        private int _coachingSchoolOrdinal = -1;
        private int _privateLessonsOrdinal = -1;
        private int _userIdOrdinal = -1;

        public SqlServertblRegisterStudentReader(SqlDataReader sqlDataReader)
        {
            this.sqlDataReader = sqlDataReader;
            for (int i = 0; i < sqlDataReader.FieldCount; i++)
            {
                string columnName = sqlDataReader.GetName(i);
                columnName = columnName.ToUpper();
                switch (columnName)
                {
                    case "ID":
                        _idOrdinal = i;
                        break;

                    case "DATEOFBIRTH":
                        _dateOfBirthOrdinal = i;
                        break;

                    case "POPULATIONID":
                        _populationIdOrdinal = i;
                        break;

                    case "CITYID":
                        _cityIdOrdinal = i;
                        break;

                    case "MUNICIPALITY":
                        _municipalityOrdinal = i;
                        break;

                    case "EMAIL":
                        _emailOrdinal = i;
                        break;

                    case "EDUCATIONALGRADEID":
                        _educationalGradeIdOrdinal = i;
                        break;

                    case "ORIENTATIONGROUPID":
                        _orientationGroupIdOrdinal = i;
                        break;

                    case "COACHINGSCHOOL":
                        _coachingSchoolOrdinal = i;
                        break;

                    case "PRIVATELESSONS":
                        _privateLessonsOrdinal = i;
                        break;

                    case "USERID":
                        _userIdOrdinal = i;
                        break;

                }
            }
        }

        #region IReader<tblRegisterStudent> Implementation

        public bool Read()
        {
            _tblRegisterStudent = null;
            return this.sqlDataReader.Read();
        }

        public tblRegisterStudent Current
        {
            get
            {
                if (_tblRegisterStudent == null)
                {
                    _tblRegisterStudent = new tblRegisterStudent();
                    if (_idOrdinal != -1)
                    {
                        _tblRegisterStudent.id = SqlServerHelper.ToInt64(sqlDataReader, _idOrdinal);
                    }
                    if (_dateOfBirthOrdinal != -1)
                    {
                        _tblRegisterStudent.dateOfBirth = SqlServerHelper.ToDateTime(sqlDataReader, _dateOfBirthOrdinal);
                    }
                    if (_populationIdOrdinal != -1)
                    {
                        _tblRegisterStudent.populationId = SqlServerHelper.ToInt64(sqlDataReader, _populationIdOrdinal);
                    }
                    if (_cityIdOrdinal != -1)
                    {
                        _tblRegisterStudent.cityId = SqlServerHelper.ToInt64(sqlDataReader, _cityIdOrdinal);
                    }
                    _tblRegisterStudent.municipality = SqlServerHelper.ToString(sqlDataReader, _municipalityOrdinal);
                    _tblRegisterStudent.email = SqlServerHelper.ToString(sqlDataReader, _emailOrdinal);
                    if (_educationalGradeIdOrdinal != -1)
                    {
                        _tblRegisterStudent.educationalGradeId = SqlServerHelper.ToInt64(sqlDataReader, _educationalGradeIdOrdinal);
                    }
                    _tblRegisterStudent.orientationGroupId = SqlServerHelper.ToNullableInt64(sqlDataReader, _orientationGroupIdOrdinal);
                    _tblRegisterStudent.coachingSchool = SqlServerHelper.ToString(sqlDataReader, _coachingSchoolOrdinal);
                    _tblRegisterStudent.privateLessons = SqlServerHelper.ToNullableBoolean(sqlDataReader, _privateLessonsOrdinal);
                    if (_userIdOrdinal != -1)
                    {
                        _tblRegisterStudent.userId = SqlServerHelper.ToInt64(sqlDataReader, _userIdOrdinal);
                    }
                }


                return _tblRegisterStudent;
            }
        }

        public void Close()
        {
            sqlDataReader.Close();
        }

        public List<tblRegisterStudent> ToList()
        {
            List<tblRegisterStudent> list = new List<tblRegisterStudent>();
            while (this.Read())
            {
                list.Add(this.Current);
            }
            this.Close();
            return list;
        }

        public DataTable ToDataTable()
        {
            DataTable dataTable = new DataTable();
            dataTable.Load(sqlDataReader);
            return dataTable;
        }

        #endregion

        #region IDisposable Implementation

        public void Dispose()
        {
            sqlDataReader.Dispose();
        }
        #endregion

        #region IEnumerable<tblRegisterStudent> Implementation

        public IEnumerator<tblRegisterStudent> GetEnumerator()
        {
            return new tblRegisterStudentEnumerator(this);
        }

        #endregion

        #region IEnumerable Implementation

        IEnumerator IEnumerable.GetEnumerator()
        {
            return new tblRegisterStudentEnumerator(this);
        }

        #endregion

        [SuppressMessage("Style", "IDE1006:Naming Styles", Justification = "<Pending>")]

        private partial class tblRegisterStudentEnumerator : IEnumerator<tblRegisterStudent>
        {
            private IReader<tblRegisterStudent> tblRegisterStudentReader;

            public tblRegisterStudentEnumerator(IReader<tblRegisterStudent> tblRegisterStudentReader)
            {
                this.tblRegisterStudentReader = tblRegisterStudentReader;
            }

            #region IEnumerator<tblRegisterStudent> Members

            public tblRegisterStudent Current
            {
                get { return this.tblRegisterStudentReader.Current; }
            }

            #endregion

            #region IDisposable Members

            public void Dispose()
            {
                this.tblRegisterStudentReader.Dispose();
            }

            #endregion

            #region IEnumerator Members

            object IEnumerator.Current
            {
                get { return this.tblRegisterStudentReader.Current; }
            }

            public bool MoveNext()
            {
                return this.tblRegisterStudentReader.Read();
            }

            public void Reset()
            {
                throw new Exception("Reset of tblregisterstudent reader is not supported.");
            }

            #endregion

        }
    }
}
